// Import nodemailer
const nodemailer = require('nodemailer');

class EmailUtils {
  constructor() {
    this.transporter = this.createTransporter();
  }

  createTransporter() {
    // Use environment variables for email configuration
    const emailConfig = {
      host: process.env.EMAIL_HOST || 'smtp.gmail.com',
      port: process.env.EMAIL_PORT || 587,
      secure: process.env.EMAIL_SECURE === 'true' || false,
      connectionTimeout: 30000, // 30 seconds - reduced for cloud
      greetingTimeout: 15000, // 15 seconds - reduced for cloud
      socketTimeout: 30000, // 30 seconds - reduced for cloud
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
      },
      tls: {
        rejectUnauthorized: false, // For development/testing
        ciphers: 'SSLv3' // Force SSLv3 for better compatibility
      },
      // Additional options for cloud environments
      pool: true,
      maxConnections: 1,
      maxMessages: 1,
      rateDelta: 20000,
      rateLimit: 5
    };

    // Debug: Log email configuration (without sensitive data)
    console.log('üìß Email config check:');
    console.log('   HOST:', emailConfig.host);
    console.log('   PORT:', emailConfig.port);
    console.log('   USER:', emailConfig.auth.user ? 'SET' : 'NOT SET');
    console.log('   PASS:', emailConfig.auth.pass ? 'SET' : 'NOT SET');

    // If no email credentials, create a test account with ethereal
    if (!emailConfig.auth.user || !emailConfig.auth.pass) {
      console.log('‚ö†Ô∏è  No email credentials found. Email features will be simulated.');
      console.log('   Missing EMAIL_USER:', !emailConfig.auth.user);
      console.log('   Missing EMAIL_PASS:', !emailConfig.auth.pass);
      return null;
    }

    try {
      const transporter = nodemailer.createTransport(emailConfig);
      
      // Verify connection configuration
      transporter.verify((error, success) => {
        if (error) {
          console.log('‚ùå Email transporter verification failed:', error.message);
        } else {
          console.log('‚úÖ Email transporter is ready');
        }
      });
      
      return transporter;
    } catch (error) {
      console.error('‚ùå Failed to create email transporter:', error.message);
      return null;
    }
  }

  async sendEmail(options, retries = 3) {
    if (!this.transporter) {
      console.log('üìß Email simulation - Would send email to:', options.to);
      console.log('Subject:', options.subject);
      console.log('Content:', options.html || options.text);
      return { messageId: 'simulated-' + Date.now() };
    }

    // Check if we're in a cloud environment (Render, Heroku, etc.)
    const isCloudEnvironment = process.env.NODE_ENV === 'production' && 
      (process.env.RENDER || process.env.HEROKU || process.env.VERCEL);
    
    if (isCloudEnvironment) {
      console.log('‚òÅÔ∏è  Cloud environment detected - using optimized settings');
    }

    for (let attempt = 1; attempt <= retries; attempt++) {
      try {
        console.log(`üìß Sending email attempt ${attempt}/${retries}...`);
        
        const mailOptions = {
          from: process.env.EMAIL_FROM || `"Portfolio Contact" <${process.env.EMAIL_USER}>`,
          to: options.to,
          subject: options.subject,
          text: options.text,
          html: options.html,
          replyTo: options.replyTo
        };

        // Add timeout to the send operation - shorter timeout for cloud
        const timeoutDuration = isCloudEnvironment ? 15000 : 30000;
        const result = await Promise.race([
          this.transporter.sendMail(mailOptions),
          new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Email send timeout')), timeoutDuration)
          )
        ]);
        
        console.log(`‚úÖ Email sent successfully on attempt ${attempt}:`, result.messageId);
        return result;
        
      } catch (error) {
        console.error(`‚ùå Email attempt ${attempt} failed:`, error.message);
        
        if (attempt === retries) {
          // Last attempt failed - log the email instead of throwing error
          console.log('üìß Email sending failed, logging email content instead:');
          console.log('   To:', options.to);
          console.log('   Subject:', options.subject);
          console.log('   Content preview:', (options.html || options.text).substring(0, 200) + '...');
          
          // Return a simulated success for cloud environments
          if (isCloudEnvironment) {
            console.log('‚òÅÔ∏è  Cloud environment: Email logged instead of sent');
            return { messageId: 'logged-' + Date.now(), logged: true };
          }
          
          throw new Error(`Failed to send email after ${retries} attempts: ${error.message}`);
        }
        
        // Wait before retry (exponential backoff)
        const waitTime = Math.pow(2, attempt) * 1000; // 2s, 4s, 8s...
        console.log(`‚è≥ Waiting ${waitTime}ms before retry...`);
        await new Promise(resolve => setTimeout(resolve, waitTime));
      }
    }
  }

  generateEmailVerificationTemplate(name, verificationUrl) {
    return {
      subject: 'X√°c th·ª±c t√†i kho·∫£n Foodies',
      html: `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="utf-8">
          <title>X√°c th·ª±c t√†i kho·∫£n</title>
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background-color: #ff6b35; color: white; padding: 20px; text-align: center; }
            .content { padding: 20px; background-color: #f9f9f9; }
            .button { display: inline-block; background-color: #ff6b35; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; margin: 20px 0; }
            .footer { text-align: center; padding: 20px; font-size: 12px; color: #666; }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1>üçú Foodies App</h1>
            </div>
            <div class="content">
              <h2>Ch√†o ${name}!</h2>
              <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n Foodies. ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω, vui l√≤ng x√°c th·ª±c email c·ªßa b·∫°n b·∫±ng c√°ch nh·∫•p v√†o n√∫t b√™n d∆∞·ªõi:</p>
              
              <div style="text-align: center;">
                <a href="${verificationUrl}" class="button">X√°c th·ª±c Email</a>
              </div>
              
              <p>Ho·∫∑c copy v√† paste link sau v√†o tr√¨nh duy·ªát:</p>
              <p style="word-break: break-all; background-color: #e9e9e9; padding: 10px; border-radius: 3px;">
                ${verificationUrl}
              </p>
              
              <p><strong>L∆∞u √Ω:</strong> Link n√†y s·∫Ω h·∫øt h·∫°n sau 24 gi·ªù.</p>
              
              <p>N·∫øu b·∫°n kh√¥ng t·∫°o t√†i kho·∫£n n√†y, vui l√≤ng b·ªè qua email n√†y.</p>
            </div>
            <div class="footer">
              <p>¬© 2024 Foodies App. All rights reserved.</p>
            </div>
          </div>
        </body>
        </html>
      `,
      text: `
        Ch√†o ${name}!
        
        C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n Foodies. ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω, vui l√≤ng x√°c th·ª±c email b·∫±ng c√°ch truy c·∫≠p link sau:
        
        ${verificationUrl}
        
        Link n√†y s·∫Ω h·∫øt h·∫°n sau 24 gi·ªù.
        
        N·∫øu b·∫°n kh√¥ng t·∫°o t√†i kho·∫£n n√†y, vui l√≤ng b·ªè qua email n√†y.
        
        Tr√¢n tr·ªçng,
        Foodies Team
      `
    };
  }

  generatePasswordResetTemplate(name, resetUrl) {
    return {
      subject: 'Reset m·∫≠t kh·∫©u Foodies',
      html: `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="utf-8">
          <title>Reset m·∫≠t kh·∫©u</title>
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background-color: #dc3545; color: white; padding: 20px; text-align: center; }
            .content { padding: 20px; background-color: #f9f9f9; }
            .button { display: inline-block; background-color: #dc3545; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; margin: 20px 0; }
            .footer { text-align: center; padding: 20px; font-size: 12px; color: #666; }
            .warning { background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 10px; border-radius: 5px; margin: 15px 0; }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1>üîí Foodies App</h1>
            </div>
            <div class="content">
              <h2>Ch√†o ${name}!</h2>
              <p>Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu reset m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n. Nh·∫•p v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ t·∫°o m·∫≠t kh·∫©u m·ªõi:</p>
              
              <div style="text-align: center;">
                <a href="${resetUrl}" class="button">Reset M·∫≠t Kh·∫©u</a>
              </div>
              
              <p>Ho·∫∑c copy v√† paste link sau v√†o tr√¨nh duy·ªát:</p>
              <p style="word-break: break-all; background-color: #e9e9e9; padding: 10px; border-radius: 3px;">
                ${resetUrl}
              </p>
              
              <div class="warning">
                <strong>‚ö†Ô∏è L∆∞u √Ω b·∫£o m·∫≠t:</strong>
                <ul>
                  <li>Link n√†y s·∫Ω h·∫øt h·∫°n sau 1 gi·ªù</li>
                  <li>Ch·ªâ s·ª≠ d·ª•ng link n√†y n·∫øu b·∫°n ƒë√£ y√™u c·∫ßu reset m·∫≠t kh·∫©u</li>
                  <li>Kh√¥ng chia s·∫ª link n√†y v·ªõi b·∫•t k·ª≥ ai</li>
                </ul>
              </div>
              
              <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu reset m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y v√† t√†i kho·∫£n c·ªßa b·∫°n s·∫Ω kh√¥ng b·ªã ·∫£nh h∆∞·ªüng.</p>
            </div>
            <div class="footer">
              <p>¬© 2024 Foodies App. All rights reserved.</p>
            </div>
          </div>
        </body>
        </html>
      `,
      text: `
        Ch√†o ${name}!
        
        Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu reset m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n. Truy c·∫≠p link sau ƒë·ªÉ t·∫°o m·∫≠t kh·∫©u m·ªõi:
        
        ${resetUrl}
        
        QUAN TR·ªåNG:
        - Link n√†y s·∫Ω h·∫øt h·∫°n sau 1 gi·ªù
        - Ch·ªâ s·ª≠ d·ª•ng n·∫øu b·∫°n ƒë√£ y√™u c·∫ßu reset m·∫≠t kh·∫©u
        - Kh√¥ng chia s·∫ª link n√†y v·ªõi ai
        
        N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu reset m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y.
        
        Tr√¢n tr·ªçng,
        Foodies Team
      `
    };
  }

  generateWelcomeTemplate(name) {
    return {
      subject: 'Ch√†o m·ª´ng ƒë·∫øn v·ªõi Foodies! üçú',
      html: `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="utf-8">
          <title>Ch√†o m·ª´ng ƒë·∫øn v·ªõi Foodies</title>
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background-color: #28a745; color: white; padding: 20px; text-align: center; }
            .content { padding: 20px; background-color: #f9f9f9; }
            .feature { background-color: white; padding: 15px; margin: 10px 0; border-radius: 5px; border-left: 4px solid #28a745; }
            .footer { text-align: center; padding: 20px; font-size: 12px; color: #666; }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1>üçú Ch√†o m·ª´ng ƒë·∫øn v·ªõi Foodies!</h1>
            </div>
            <div class="content">
              <h2>Xin ch√†o ${name}!</h2>
              <p>T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng! B√¢y gi·ªù b·∫°n c√≥ th·ªÉ t·∫≠n h∆∞·ªüng t·∫•t c·∫£ t√≠nh nƒÉng c·ªßa Foodies:</p>
              
              <div class="feature">
                <h3>üîç Kh√°m ph√° m√≥n ƒÉn</h3>
                <p>T√¨m ki·∫øm h√†ng ng√†n m√≥n ƒÉn ngon t·ª´ kh·∫Øp n∆°i</p>
              </div>
              
              <div class="feature">
                <h3>‚≠ê ƒê√°nh gi√° & Review</h3>
                <p>Chia s·∫ª tr·∫£i nghi·ªám v√† ƒë·ªçc review t·ª´ c·ªông ƒë·ªìng</p>
              </div>
              
              <div class="feature">
                <h3>üìù T·∫°o danh s√°ch y√™u th√≠ch</h3>
                <p>L∆∞u l·∫°i nh·ªØng m√≥n ƒÉn b·∫°n y√™u th√≠ch</p>
              </div>
              
              <div class="feature">
                <h3>üì± ·ª®ng d·ª•ng di ƒë·ªông</h3>
                <p>S·ª≠ d·ª•ng Foodies m·ªçi l√∫c, m·ªçi n∆°i</p>
              </div>
              
              <p>H√£y b·∫Øt ƒë·∫ßu kh√°m ph√° ngay h√¥m nay!</p>
              
              <p>N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, ƒë·ª´ng ng·∫ßn ng·∫°i li√™n h·ªá v·ªõi ch√∫ng t√¥i.</p>
            </div>
            <div class="footer">
              <p>¬© 2024 Foodies App. All rights reserved.</p>
              <p>B·∫°n nh·∫≠n ƒë∆∞·ª£c email n√†y v√¨ ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n Foodies.</p>
            </div>
          </div>
        </body>
        </html>
      `,
      text: `
        Xin ch√†o ${name}!
        
        Ch√†o m·ª´ng ƒë·∫øn v·ªõi Foodies! T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng.
        
        B√¢y gi·ªù b·∫°n c√≥ th·ªÉ:
        - Kh√°m ph√° h√†ng ng√†n m√≥n ƒÉn ngon
        - ƒê√°nh gi√° v√† review m√≥n ƒÉn
        - T·∫°o danh s√°ch y√™u th√≠ch
        - S·ª≠ d·ª•ng ·ª©ng d·ª•ng di ƒë·ªông
        
        H√£y b·∫Øt ƒë·∫ßu kh√°m ph√° ngay h√¥m nay!
        
        Tr√¢n tr·ªçng,
        Foodies Team
      `
    };
  }

  async sendEmailVerification(user, verificationUrl) {
    const template = this.generateEmailVerificationTemplate(user.name, verificationUrl);
    return await this.sendEmail({
      to: user.email,
      ...template
    });
  }

  async sendPasswordReset(user, resetUrl) {
    const template = this.generatePasswordResetTemplate(user.name, resetUrl);
    return await this.sendEmail({
      to: user.email,
      ...template
    });
  }

  async sendWelcomeEmail(user) {
    const template = this.generateWelcomeTemplate(user.name);
    return await this.sendEmail({
      to: user.email,
      ...template
    });
  }
}

// Export singleton instance
module.exports = new EmailUtils();
