const axios = require('axios');

const BASE_URL = 'http://localhost:3000/api/portfolio';

/**
 * Test Portfolio API - Simplified (ch·ªâ 3 tr∆∞·ªùng b·∫Øt bu·ªôc: name, email, message)
 */

// Test 1: Health check
async function testHealthCheck() {
  console.log('\nüè• Test 1: Health Check');
  
  try {
    const response = await axios.get(`${BASE_URL}/health`);
    console.log('‚úÖ Health check passed:', response.data.message);
  } catch (error) {
    console.log('‚ùå Health check failed:', error.response?.data || error.message);
  }
}

// Test 2: Get contact info
async function testGetContactInfo() {
  console.log('\nüìû Test 2: Get Contact Info');
  
  try {
    const response = await axios.get(`${BASE_URL}/contact-info`);
    console.log('‚úÖ Contact info retrieved successfully:');
    const data = response.data.data;
    console.log(`   Name: ${data.name}`);
    console.log(`   Email: ${data.email}`);
    console.log(`   Available: ${data.available}`);
  } catch (error) {
    console.log('‚ùå Get contact info failed:', error.response?.data || error.message);
  }
}

// Test 3: Send contact email - Success case
async function testSendContactEmailSuccess() {
  console.log('\nüìß Test 3: Send Contact Email (Success)');
  
  const contactData = {
    name: "Nguy·ªÖn VƒÉn A",
    email: "recruiter@company.com",
    message: "Ch√†o b·∫°n Duy Khang,\n\nT√¥i l√† HR Manager t·∫°i ABC Technology. Ch√∫ng t√¥i ƒëang t√¨m ki·∫øm m·ªôt Frontend Developer c√≥ kinh nghi·ªám v·ªõi React v√† Node.js.\n\nSau khi xem portfolio c·ªßa b·∫°n, ch√∫ng t√¥i r·∫•t ·∫•n t∆∞·ª£ng v·ªõi c√°c d·ª± √°n m√† b·∫°n ƒë√£ th·ª±c hi·ªán. Ch√∫ng t√¥i mu·ªën m·ªùi b·∫°n tham gia ph·ªèng v·∫•n cho v·ªã tr√≠ n√†y.\n\nM·ª©c l∆∞∆°ng: 15-20 tri·ªáu VND\nƒê·ªãa ƒëi·ªÉm: Qu·∫≠n 1, TP.HCM\nH√¨nh th·ª©c: Full-time\n\nB·∫°n c√≥ th·ªÉ ph·∫£n h·ªìi l·∫°i email n√†y n·∫øu quan t√¢m.\n\nTr√¢n tr·ªçng,\nNguy·ªÖn VƒÉn A"
  };

  try {
    const response = await axios.post(`${BASE_URL}/contact`, contactData, {
      headers: { 'Content-Type': 'application/json' }
    });
    
    console.log('‚úÖ Email sent successfully!');
    console.log('   Message:', response.data.message);
    console.log('   From:', response.data.data.from);
    console.log('   Name:', response.data.data.name);
    console.log('   Sent at:', response.data.data.sentAt);
    
  } catch (error) {
    console.log('‚ùå Send email failed:', error.response?.data || error.message);
  }
}

// Test 4: Send contact email - Minimal message
async function testSendContactEmailMinimal() {
  console.log('\nüìß Test 4: Send Contact Email (Short Message)');
  
  const contactData = {
    name: "Tr·∫ßn Th·ªã B",
    email: "hr@startup.vn", 
    message: "Ch√†o b·∫°n, ch√∫ng t√¥i c√≥ m·ªôt d·ª± √°n web app c·∫ßn h·ªó tr·ª£. B·∫°n c√≥ th·ªÉ li√™n h·ªá l·∫°i kh√¥ng?"
  };

  try {
    const response = await axios.post(`${BASE_URL}/contact`, contactData, {
      headers: { 'Content-Type': 'application/json' }
    });
    
    console.log('‚úÖ Email sent successfully (short message)!');
    console.log('   From:', response.data.data.from);
    console.log('   Name:', response.data.data.name);
    
  } catch (error) {
    console.log('‚ùå Send email failed:', error.response?.data || error.message);
  }
}

// Test 5: Validation - Missing required fields
async function testValidationMissingFields() {
  console.log('\n‚ùå Test 5: Validation - Missing Required Fields');
  
  const invalidData = {
    name: "Test User",
    email: "test@example.com"
    // Missing message
  };

  try {
    const response = await axios.post(`${BASE_URL}/contact`, invalidData, {
      headers: { 'Content-Type': 'application/json' }
    });
    
    console.log('‚ö†Ô∏è  Unexpected success:', response.data);
    
  } catch (error) {
    console.log('‚úÖ Validation working correctly:');
    console.log('   Error:', error.response?.data?.message);
    if (error.response?.data?.errors) {
      console.log('   Field errors:', error.response.data.errors);
    }
  }
}

// Test 6: Validation - Invalid email
async function testValidationInvalidEmail() {
  console.log('\n‚ùå Test 6: Validation - Invalid Email');
  
  const invalidData = {
    name: "Test User",
    email: "invalid-email",
    message: "This is a test message with enough characters"
  };

  try {
    const response = await axios.post(`${BASE_URL}/contact`, invalidData, {
      headers: { 'Content-Type': 'application/json' }
    });
    
    console.log('‚ö†Ô∏è  Unexpected success:', response.data);
    
  } catch (error) {
    console.log('‚úÖ Email validation working correctly:');
    console.log('   Error:', error.response?.data?.message);
  }
}

// Test 7: Validation - Message too short
async function testValidationShortMessage() {
  console.log('\n‚ùå Test 7: Validation - Message Too Short');
  
  const invalidData = {
    name: "Test User",
    email: "test@example.com",
    message: "Short"
  };

  try {
    const response = await axios.post(`${BASE_URL}/contact`, invalidData, {
      headers: { 'Content-Type': 'application/json' }
    });
    
    console.log('‚ö†Ô∏è  Unexpected success:', response.data);
    
  } catch (error) {
    console.log('‚úÖ Message length validation working correctly:');
    console.log('   Error:', error.response?.data?.message);
  }
}

// Run all tests
async function runAllTests() {
  console.log('üöÄ Starting Portfolio API Tests (Simplified Version)...\n');
  console.log('=' .repeat(60));
  
  await testHealthCheck();
  await testGetContactInfo();
  await testSendContactEmailSuccess();
  await testSendContactEmailMinimal();
  await testValidationMissingFields();
  await testValidationInvalidEmail();
  await testValidationShortMessage();
  
  console.log('\n' + '='.repeat(60));
  console.log('‚ú® All Portfolio API tests completed!');
  console.log('\nüìù API Summary:');
  console.log('   üìç Endpoint: POST /api/portfolio/contact');
  console.log('   üìã Required fields: name, email, message');
  console.log('   ‚úÖ Validation: email format, message length (10-2000 chars)');
  console.log('   üìß Features: HTML email template, auto-reply confirmation');
  console.log('\nüéØ Portfolio API is ready for your website!');
}

// Run tests
runAllTests().catch(console.error);
